enum Categoria{
  SUPERIOR,
  INFERIOR,
  CALZADO,
  ACCESORIO,
  ...
}

enum Material {
  ALGODON,
  ...
}

enum Trama {
  RAYADO
  CON_LUNARES
  ESTAMPADOS
  A_CUADROS
}

class TipoPrenda {
  var categoria;
  
  constructor TipoPrenda(categoria){
    this.categoria = categoria;
  }

  getCategoria(){
    return categoria;
  }  
}

class Color {
  var r
  var g
  var b
  
  constructor Color(r,g,b) {
    this.r = r; this.g = g; this.b = b;
  }

  rgb() {return [r,g,b];}
  r() {return r;}
  g() {return g;}
  b() {return b;}
}


class Prenda {
  var tipo
  var material
  orderedList colores

  constructor Prenda(tipo, material, colores) {
      this.tipo = tipo;
      this.material = material;
      this.colores = colores;
  }

  colorPrincipal() { return colores[0]; }
  colorSecundario() { return colores[1]? colores[1] : null; }
}

class Atuendo {
  list prendas
  var temperatura

  constructor Atuendo( prendas ) {
      this.prendas = null;
  }

  agregarPrenda(tipo, categoria, material, colores) { 
        if (!tipo || !cateogria || !material || colores.length < 1) return ;
        prendas.add(new Prenda(tipo, categoria, material, colores));
      }
  
  getTemperatura() {return this.temperatura;}
}

class Borrador {
  var tipo;
  var categoria;
  var material;
  var colores;

  constructor Borrador(){}

  setTipo(tipo){ if(tipo) this.tipo = tipo; return this;}
  setMaterial(material){ if(material) this.material = material; return this;}
  setColores(colores){ if(colores) this.colores = colores; return this;}
  crearPrenda() {return new Prenda(tipo, material, colores)}
}

class Uniforme inherits Prenda{
  list prendas;
  constructor Uniforme(parteInferior, parteSuperior, calzado){
    prendas.add(parteInferior, parteSuperior, calzado);
  }
}

abstract class Sastre {
  abstract crearParteSuperior();
  abstract crearParteInferior();
  abstract crearCalzado();
  crearUniforme() {
    return new Uniforme(
      crearParteSuperior();
      crearParteInferior();
      crearCalzado();
    )    
  }
}

class RepositorioAtuendos{
  list atuendos;

  _instance
  instance(){
    if (!_instance)
      _instance = new RepositorioAtuendos();
    return _instance;
  }

  getAtuendo(sugerencia){
    return getAteundos(sugerencia).first();
  }

  getAtuendos(sugerencia){
    return atuendos.filter((atuendo) => sugerencia.cumple(atuendo))
  }
}

interface Sugerencia {
  cumple(atuendo);
}

class SugerenciaPorTemperatura implements Sugerencia {
  cumple(atuendo){
    const temperaturaActual = ClimaManager.instance().getTemperatura("Buenos Aires, Argentina");
    return temperaturaActual == atuendo.getTemperatura();
  }
}

class SugerenciaPorCategorias implements Sugerencia {
  list categorias
  constructor(categorias){ this.categorias = categorias;}
  cumple(atuendo){
    return categorias.forEach((categoria) => {
      atuendo.getPrendas().any((prenda) => prenda.getCategoria() == categoria)
    })
  }
}

class ClimaManager{
  _instance;
  climaApi;

  instance(){
    if(!_instance)
      this._instance = new ClimaManager();
    return _instance;
  }

  setApi(nuevaApi){this.climaApi = nuevaApi;}
  getTemperatura(lugar){climaApi.getTemperatura();}
  getPrecipitation(lugar){clima.Api.getPrecipitation();}
}

abstract class ClimaApi{
  climaCache;
  maxTries;
  tries;

  constructor ClimaApi(climaCache, maxTries){
    this.climaCache = climaCache;
    this.maxTries = maxTries;
    this.tries = 0;
  }

  abstract loadCache(){}
  resetTries(){this.tries = 0;}
  abstract getTemperatura(lugar);
  abstract getPrecipitation(lugar);
}

class AccuWeatherApi inherits ClimaApi{
  api;

  constructor ClimaApi(climaCache, maxTries){
    super(climaCache, maxTries);
    this.api = new AccuWeatherAPI();
  }

  override loadCache(lugar){
    this.climaCache = apiClima.getWeather(lugar); 
  }

  override getPrecipitation(lugar){
    return climaCache.get(0).get("PrecipitationProbability");
  }
}

//Ejemplo
class SastreSanJuan inherits Sastre{
  override crearParteSuperior(){
    borrador = new Borrador(CHOMBA);
    borrador.setColor(AZUL_OSCURO)
            .setMaterial(Materiales.TELA);
            .setTipo(ALGODON);
    return borrador.crearPrenda();
  }

  override crearParteInferior(){
    //...
  }

  override crearCalzado(){
    ...
  }
}